# -------------------------------
# AIML Project: Diabetes Prediction with KNN
# -------------------------------

# Import libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline

sns.set_style('whitegrid')
import warnings
warnings.filterwarnings('ignore')

# -------------------------------
# Load Dataset
# -------------------------------
from google.colab import files
uploaded = files.upload()

diabetes_data = pd.read_csv('preprocessed_diabetes_data.csv')
print(diabetes_data.shape)
print(diabetes_data.head())
print(diabetes_data.describe().T)

# -------------------------------
# Correlation Heatmap
# -------------------------------
plt.figure(figsize=(10,6))
sns.heatmap(diabetes_data.corr(), annot=True, cmap='coolwarm')
plt.title("Correlation Heatmap")
plt.show()

# -------------------------------
# Pair Plot
# -------------------------------
sns.pairplot(diabetes_data, hue='Outcome')
plt.show()

# -------------------------------
# Boxplots
# -------------------------------
sns.boxplot(x='Outcome', y='DiabetesPedigreeFunction', data=diabetes_data)
plt.title("Pedigree Function vs Diabetes")
plt.show()

sns.boxplot(x='Outcome', y='Pregnancies', data=diabetes_data)
plt.title("Pregnancies vs Diabetes")
plt.show()

sns.boxplot(x='Outcome', y='Age', data=diabetes_data)
plt.title("Age vs Diabetes")
plt.show()

sns.boxplot(x='Outcome', y='BMI', data=diabetes_data)
plt.title("BMI vs Diabetes")
plt.show()

# -------------------------------
# KNN Helper Function
# -------------------------------
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier

def plot_KNN_error_rate(xdata, ydata):
    error_rate = []
    test_scores = []
    train_scores = []

    X_train, X_test, y_train, y_test = train_test_split(
        xdata, ydata, test_size=0.3, random_state=42)

    for i in range(1,40):
        knn = KNeighborsClassifier(n_neighbors=i)
        knn.fit(X_train, y_train)
        pred_i = knn.predict(X_test)

        error_rate.append(np.mean(pred_i != y_test))
        train_scores.append(knn.score(X_train, y_train))
        test_scores.append(knn.score(X_test, y_test))

    plt.figure(figsize=(12,8))
    plt.plot(range(1,40), error_rate, color='blue', linestyle='dashed', marker='o',
             markerfacecolor='red', markersize=8)
    plt.title('Error Rate vs. K Value')
    plt.xlabel('K')
    plt.ylabel('Error Rate')
    plt.show()

    return test_scores

# -------------------------------
# Without Standardization
# -------------------------------
X = diabetes_data.drop('Outcome', axis=1)
y = diabetes_data['Outcome']

unchanged_test_scores = plot_KNN_error_rate(X, y)

# -------------------------------
# Standardization
# -------------------------------
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
scaler.fit(X)
scaled_data = scaler.transform(X)

scaled_test_scores = plot_KNN_error_rate(scaled_data, y)

# Compare accuracy
plt.figure(figsize=(20,8))
plt.title('Accuracy vs. K Value')
sns.lineplot(unchanged_test_scores, marker='o', label='Unscaled Data')
sns.lineplot(scaled_test_scores, marker='o', label='Standardized Data')
plt.show()

# -------------------------------
# MinMax Scaling
# -------------------------------
from sklearn.preprocessing import MinMaxScaler

minmax_scaler = MinMaxScaler()
minmax_scaled = minmax_scaler.fit_transform(X)

minmax_test_scores = plot_KNN_error_rate(minmax_scaled, y)

# -------------------------------
# Voronoi Diagram (2 Features)
# -------------------------------
from matplotlib.colors import ListedColormap

X_vis = minmax_scaled[:, :2]   # First 2 features
